Вопросы:
    @RequestMapping - в будущем упрощает работу с Security? Для более простого ограничения к доступу по ролям
_______________________________________________________________________________________________________________________
    Spring в действии:
        Spring - контейнер, предлагающий создание bean компонентов приложения и управление ими.
        Объединение bean компонентов внутри контекста (контейнера) Spring образует приложение.
        Объединение происходит по шаблону внедрения зависимостей Dependency Injection
        Spring Boot - расширение Framework, предлагающее некоторые расширения, наиболее известное - автоконфигурация
        обоснованные предположения о том, какие компоненты следует связать вместе.
_______________________________________________________________________________________________________________________
    Basic class:
       @SpringBootApplication - составная конфигурация, состоит из:
            @SpringBootConfiguration - Определяет класс как конфигурацию
            @EnableAutoConfiguration - Включает автоконфигурацию
            @ComponentScan - Включает сканирование всех компонентов (@Component, @Controller, @Service)

        Basic test class:
       @SpringBootTest - Настройка Junit, составная конфигурация:
                 @ExtendWith(SpringExtension.class) - добавляет Junit 5
_______________________________________________________________________________________________________________________
    Spring Boot DevTools -набор дополнительных инструментов разработчика
        -Перезапускает приложение при изменении кода
        -Обновляет окно браузера
        -Отключает кеширование шаблонов
        -Встроенная консоль H2
_______________________________________________________________________________________________________________________
    Spring MVC - контроллер - обрабатывает запросы и возвращает информацию
        Entity - модель базы
        @Controller- всего-лишь идентифицирует компонент как доступный для сканиррования
        Dto - форма для ввода или вывода
        @Component
        @Service
        @Repository
_______________________________________________________________________________________________________________________
Jackson формирует и читает jason строчку - JS object Notation
   Формат данных для обмена в сети, формат данных: ключ - значение

   @JsonProperty - указывает название свойства в jason строчке
   @JsonIgnore - исклоючает поле из сериализации/десириализации
   @JsonInclude - (валидация?) можно указывать над свойство и над классом, свойство должно соблюдаться,
   для включения в json
        NON_DEFAULT - включает только недефолтные поля
                * Возможна проблема с нулями, фолсами и т.д.
        NON_NULL - включает только не пустые строчки
                * Только про ссылочные типы
   @JsonNaming(PropertyNamingStrategies) - задает стиль задачи имен для переменных (KamelCase, Snake_case и др)
        При наличии взаимных ссылок:
   @JsonManagedReference – это прямая часть ссылки, которая сериализуется обычным образом
   @JsonBackReference – это обратная часть ссылки - она будет опущена при сериализации
   @JsonIdentityInfo - Подставляет уникальный идентификатор вместо ссылки
   _
   @JsonSerialize (Ссылка на класс), в классе правила, сериализации/десериализации
   @JsonDeserialize
   @JsonIgnoreType - параметры передаются как единый объект, без названия параметра

_______________________________________________________________________________________________________________________

    @Column - задает имя в таблице

    @RequestMapping() - по умолчанию прооизводит сопоставление со всеми HTTP методами
    @RequestBody - обеспечаивает доступ к телу HTTP запроса, содержимое преобразуется в явный тип агрумента метода
        Тело не должно быть пустым
_______________________________________________________________________________________________________________________
    Работа методов - Get запрос->Controller->Service->Repository->Entity->Post запрос - Создание в обратном порядке




